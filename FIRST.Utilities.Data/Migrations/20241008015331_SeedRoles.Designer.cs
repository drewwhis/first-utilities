// <auto-generated />
using System;
using FIRST.Utilities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FIRST.Utilities.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241008015331_SeedRoles")]
    partial class SeedRoles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("FIRST.Utilities.Entities.ActiveFtcEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId");

                    b.ToTable("ActiveFtcEvents");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.ActiveFtcMatch", b =>
                {
                    b.Property<int>("FtcMatchId")
                        .HasColumnType("INTEGER");

                    b.HasKey("FtcMatchId");

                    b.ToTable("ActiveFtcMatches");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.ActiveProgramSeason", b =>
                {
                    b.Property<int>("ActiveProgramSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProgramCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonYear")
                        .HasMaxLength(80)
                        .HasColumnType("INTEGER");

                    b.HasKey("ActiveProgramSeasonId");

                    b.HasIndex(new[] { "ProgramCode" }, "ProgramCode")
                        .IsUnique();

                    b.ToTable("ActiveProgramSeasons");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcEvent", b =>
                {
                    b.Property<int>("FtcEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EventCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("INTEGER");

                    b.HasKey("FtcEventId");

                    b.HasIndex(new[] { "EventCode" }, "EventCode")
                        .IsUnique();

                    b.ToTable("FtcEvents");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcMatch", b =>
                {
                    b.Property<int>("FtcMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Field")
                        .HasColumnType("TEXT");

                    b.Property<int>("MatchNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Series")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TournamentLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("FtcMatchId");

                    b.HasIndex(new[] { "MatchNumber", "TournamentLevel", "Series" }, "IX_MatchNumber_TournamentLevel_Series")
                        .IsUnique();

                    b.ToTable("FtcMatches");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcMatchParticipant", b =>
                {
                    b.Property<int>("FtcMatchParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Alliance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FtcMatchId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FtcTeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Station")
                        .HasColumnType("INTEGER");

                    b.HasKey("FtcMatchParticipantId");

                    b.HasIndex("FtcTeamId");

                    b.HasIndex(new[] { "FtcMatchId", "Alliance", "Station" }, "IX_Match_Alliance_Station")
                        .IsUnique();

                    b.HasIndex(new[] { "FtcMatchId", "FtcTeamId" }, "IX_Match_Team")
                        .IsUnique();

                    b.ToTable("FtcMatchParticipants");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcTeam", b =>
                {
                    b.Property<int>("FtcTeamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FullName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("SeasonYear")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShortName")
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("FtcTeamId");

                    b.HasIndex(new[] { "TeamNumber" }, "TeamNumber")
                        .IsUnique();

                    b.ToTable("FtcTeams");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d14108ad-9217-48f8-9fd3-41696125306c",
                            Name = "UtilitiesAdmin"
                        },
                        new
                        {
                            Id = "3f2d5764-9e93-4941-bc3c-77dbd24c0974",
                            Name = "FtcEventAdmin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.ActiveFtcEvent", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.FtcEvent", "Event")
                        .WithOne("ActiveEvent")
                        .HasForeignKey("FIRST.Utilities.Entities.ActiveFtcEvent", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.ActiveFtcMatch", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.FtcMatch", "Match")
                        .WithOne("ActiveMatch")
                        .HasForeignKey("FIRST.Utilities.Entities.ActiveFtcMatch", "FtcMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Match");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcMatchParticipant", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.FtcMatch", "FtcMatch")
                        .WithMany("FtcMatchParticipants")
                        .HasForeignKey("FtcMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FIRST.Utilities.Entities.FtcTeam", "FtcTeam")
                        .WithMany("FtcMatchParticipants")
                        .HasForeignKey("FtcTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FtcMatch");

                    b.Navigation("FtcTeam");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FIRST.Utilities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FIRST.Utilities.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcEvent", b =>
                {
                    b.Navigation("ActiveEvent");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcMatch", b =>
                {
                    b.Navigation("ActiveMatch");

                    b.Navigation("FtcMatchParticipants");
                });

            modelBuilder.Entity("FIRST.Utilities.Entities.FtcTeam", b =>
                {
                    b.Navigation("FtcMatchParticipants");
                });
#pragma warning restore 612, 618
        }
    }
}
